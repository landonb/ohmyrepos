# vim:tw=0:ts=2:sw=2:et:norl:nospell:ft=bash
# Author: Landon Bouma (landonb &#x40; retrosoft &#x2E; com)
# Project: https://github.com/landonb/ohmyrepos#😤
# License: MIT

# ========================================================================
# ------------------------------------------------------------------------

# USAGE: Source this script from your own ~/.mrconfig.
#
#        If you clone ohmyrepos to, e.g., ~/.ohmyrepos, it's easy:
#
#         - Trust this file first:
#
#           $ echo "${HOME}/.ohmyrepos/.mrconfig-omr" >> ~/.mrtrust
#
#         - Sourch this file from your user's ~/.mrconfig:
#
#           $ cat >> ~/.mrconfig <<'EOF'
#           [DEFAULT]
#           include = cat "${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/../.mrconfig-omr"
#           EOF
#
#         - Then use it! E.g.,
#
#           $ mr -d / mystatus
#
#         - For more inspiration, look at `.mrconfig.example`.

# ========================================================================
# ------------------------------------------------------------------------

[DEFAULT]
# So that the scripts themselves can perform worry-free sourcing,
# add the OMR lib to PATH.
lib = PATH="${PATH}:${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}"

# - Wire the color library dependency.
#   https://github.com/landonb/sh-colors#💥
lib = PATH="${PATH}:${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/../deps/sh-colors/bin"

# - Wire the logger library dependency.
#   https://github.com/landonb/sh-logger#🎮🐸
lib =
  PATH="${PATH}:${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/../deps/sh-logger/bin"
  # Let the caller override the LOG_LEVEL. Note that we don't check LOG_LEVEL
  # itself, because the user might be using logger.sh in their own environment
  # and have the level set to their liking for their environment, but that does
  # not mean it's the best value for when they run `mr`. So if the user wants
  # to change the log level for the `mr` command, they must use MR_LOG_LEVEL.
  . logger.sh
  # Verify MR_LOG_LEVEL is an integer. Note the -eq spews when it fails, e.g.:
  #   bash: [: <foo>: integer expression expected
  [ -n "${MR_LOG_LEVEL}" ] \
    && ! [ ${MR_LOG_LEVEL} -eq ${MR_LOG_LEVEL} ] \
    && >&2 echo "WARNING: Resetting MR_LOG_LEVEL, not an integer" \
    && export MR_LOG_LEVEL=
  # Default log level: Debug and higher.
  LOG_LEVEL=${MR_LOG_LEVEL:-${LOG_LEVEL_DEBUG}}

# - Wire the timing library dependency.
#   https://github.com/landonb/sh-print-nanos-now#⏱️
lib = PATH="${PATH}:${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/../deps/sh-print-nanos-now/bin"

# ========================================================================
# ------------------------------------------------------------------------

[DEFAULT]
# Oh My Repos offers a handful of actions and utilities, included here,
# one-by-one. Each of these files -- each a mrconfig file -- use `lib =`
# to load their corresponding shell (.sh) file (so these `include` calls
# must follow the `lib = PATH` calls, above).
# - Note that it's difficult to debug parse errors with glob, e.g.,
#     include = cat ${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/*
#   because any line number printed will not be very meaningful.
include = cat "${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/any-action-runtime"
include = cat "${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/clone-github"
include = cat "${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/echo-slather-install"
include = cat "${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/fetch-selective"
include = cat "${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/git-auto-commit"
include = cat "${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/git-config-user-email-privatize"
# Optional: https://github.com/landonb/git-my-merge-status
include = cat "${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/git-my-merge-status"
include = cat "${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/infuse-no-op"
include = cat "${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/install-os-specific"
include = cat "${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/link-hard"
include = cat "${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/link-private-exclude"
include = cat "${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/link-private-ignore"
include = cat "${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/no-travel"
include = cat "${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/os-is-macos"
include = cat "${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/private-clone"
include = cat "${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/pull-latest"
include = cat "${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/rebase-tip"
include = cat "${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/remote-add"
# CAVEAT: Though `. skip-grouping.sh` called by `skip-grouping`, it's via
# a `lib` block, which run after `include` blocks. So to use `mr_exclusive`
# from an include block, you need to `. skip-grouping.sh` from that block.
include = cat "${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/skip-grouping"
include = cat "${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/sorted-commit"
include = cat "${OHMYREPOS_LIB:-${HOME}/.ohmyrepos/lib}/sync-travel-remote"

# ========================================================================
# ------------------------------------------------------------------------

[DEFAULT]
# Use the _append feature to chain setup and teardown functions.
setup_dispatch_append = git_any_cache_setup "${@}"
# Optional: https://github.com/landonb/git-my-merge-status
setup_dispatch_append = command -v "git_status_cache_setup" > /dev/null \
  && git_status_cache_setup "${@}"
setup_dispatch_append = git_travel_cache_setup "${@}"

teardown_dispatch_append = git_travel_cache_teardown "${@}"
# Optional: https://github.com/landonb/git-my-merge-status
teardown_dispatch_append = command -v "git_status_cache_teardown" > /dev/null \
  && git_status_cache_teardown "${@}"
# Order matters: Ensure the 'any' teardown is last, so it runs last.
teardown_dispatch_append = git_any_cache_teardown "${@}"

# ========================================================================
# ------------------------------------------------------------------------

# If no explicit 'checkout' action, use MR_REPO_REMOTES environ.
# - DRY: This lets us avoid having project-specific 'checkout' and
#   'wireRemotes' actions that both specify the same main remote.

# Note myrepos won't run user actions unless the project directory exists,
# but it exempts the 'checkout' action.
# - Also, myrepos will skip 'checkout' if the project directory exists.
# - So if we wanted to call another action from 'checkout', we'd have to
#   create the destination directory first, e.g.,
#     mkdir -p -- "${MR_REPO}"
#     mr -d "${MR_REPO}" -n <someOtherAction>
#   But we can inline what we need to do here.

[DEFAULT]
checkout =
  if [ -z "${MR_REPO_REMOTES}" ]; then
    >&2 echo "ERROR: Missing project-specific MR_REPO_REMOTES var, or 'checkout' action"
    #
    exit 1
  fi
  #
  set -- ${MR_REPO_REMOTES}
  local remote_name="$1"
  local remote_url_or_path="$2"
  local dest_dir=""
  # Test if couplet or thruple: If third arg. ends in /, indicates dest. dir;
  # otherwise (if set) is start of next remote name/url[/dest] pair/throuple
  # (which 'wireRemotes' uses, but not 'checkout').
  # - Use POSIX-compliant parameter expansion to test the third arg.
  #   - REFER: https://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_06_02
  # - ALTLY: Use case test, e.g.,:
  #     case $3 in
  #       *"/") dest_dir="$3" ;;
  #     esac
  if [ "${3%/}" != "${3}" ]; then
    dest_dir="$3"
  fi
  git_clone_giturl -o "${remote_name}" "${remote_url_or_path}" ${dest_dir}

# ***

# Use a project environ to specify both the clone URL, and additional remotes.
# - E.g.,:
#
#     [/path/to/one/repo]
#     lib = MR_REPO_REMOTES="
#       origin https://github.com/git/git.git git/
#       fork https://github.com/user1/git.git
#       spoon https://github.com/user2/git.git
#       "
#
#     [/path/to/another/repo]
#     lib = MR_REPO_REMOTES="
#       origin https://github.com/git/git.git
#       fork https://github.com/user1/git.git
#       "

[DEFAULT]
wireRemotes =
  exit_if_arg_missing () {
    if [ -z "$1" ]; then
      >&2 echo "ERROR: Incomplete MR_REPO_REMOTES for project: ${MR_REPO}"
      #
      exit 1
    fi
  }
  #
  set -- ${MR_REPO_REMOTES}
  #
  exit_if_arg_missing "$1"
  #
  local processed_first=false
  #
  while [ -n "$1" ]; do
    local remote_name="$1"
    local remote_url_or_path="$2"
    #
    exit_if_arg_missing "${remote_url_or_path}"
    shift 2
    #
    # Ignore the dest. dir (only used on 'checkout').
    if ! ${processed_first} && [ "${1%/}" != "${1}" ]; then
      shift
    fi
    #
    remote_add "${remote_name}" "${remote_url_or_path}"
    #
    processed_first=true
  done

# ***

# Defaults for `install-os-specific` function.

[DEFAULT]
installDarwin = false
installLinux = false

# ***

# Default some actions to 'true' so that, for projects that do not
# define these actions, `mr -d / <action>` will not report 'failed'.

[DEFAULT]
autocommit = true
slatherInstall = true

# ***

[DEFAULT]
# For all actions (any action), do not print blank line between repos.
no_print_sep = true

# For mystatus action, do not print action or directory header line.
no_print_action_mystatus = true
no_print_dir_mystatus = true
# For mystatus action, do not print if repo fails (action will do it).
no_print_failed_mystatus = true

# Likewise for `ffssh`...
no_print_action_ffssh = true
no_print_dir_ffssh = true
no_print_failed_ffssh = true

# ... and the `travel` command.
no_print_action_travel = true
no_print_dir_travel = true
no_print_failed_travel = true

# ... and the `unpack` command.
no_print_action_unpack = true
no_print_dir_unpack = true
no_print_failed_unpack = true

# ... and the `autocommit` command.
# Note also the `[DEFAULT] autocommit = true`,
# below, which further reduces amount of output.
no_print_action_autocommit = true
no_print_dir_autocommit = true
no_print_failed_autocommit = true

# 2020-03-14: (lb): I added these 2 no-prints to try quieter
# `run` commands, e.g., `mr -d / run bash -c '...'`. While I
# am not committed (yet) to keeping these, so far, I like.
no_print_dir_run = true
no_print_failed_run = true

# ========================================================================
# ------------------------------------------------------------------------

[DEFAULT]
# Wire `mr pull` to git-pull.
# - Note that myrepos wires pull, but via `update`, e.g., `mr update`.
#   - If you compare the equivalent update commands for the 9 SCMs that
#     myrepos supports, you'll see `pull` is less ambiguous than `update`.
#     - For instance, `svn update` is like `git pull`, but in hg,
#       `hg pull` is like `git fetch`, and `hg update` like `git merge`,
#       so hg_update calls `hg pull "$@"; hg update "$@"`.
#   (lb): But I only use git, so let's wire `mr pull` for parity.
# - We could naively wire the function, e.g.,
#     git_pull = git pull "$@"
#   but that runs the risk of creating conflicts in the user's projects.
#   - The user could avoid this with the following in their .gitconfig:
#       [pull]
#         ff = only
#   - Or we could just be explicit about it here (let's do that).
# git_pull = git pull "$@"
git_pull =
  git fetch "$@" \
    && git merge --ff-only "$@" FETCH_HEAD \
      | grep -v "Already up to date." || true

# ========================================================================
# ------------------------------------------------------------------------

