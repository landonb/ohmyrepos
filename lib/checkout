# If no explicit 'checkout' action, use MR_REPO_REMOTES environ.
# - DRY: This lets us avoid having project-specific 'checkout' and
#   'wireRemotes' actions that both specify the same main remote.

# Note myrepos won't run user actions unless the project directory exists,
# but it exempts the 'checkout' action.
# - Also, myrepos will skip 'checkout' if the project directory exists.
# - So if we wanted to call another action from 'checkout', we'd have to
#   create the destination directory first, e.g.,
#     mkdir -p -- "${MR_REPO}"
#     mr -d "${MR_REPO}" -n <someOtherAction>
#   But we can inline what we need to do here.

[DEFAULT]
checkout =
  if [ -z "${MR_REPO_REMOTES}" ]; then
    >&2 echo "ERROR: Please define either MR_REPO_REMOTES environ, or 'checkout' action"
    #
    exit 1
  fi
  #
  eval "set -- ${MR_REPO_REMOTES}"
  local remote_name="$1"
  local remote_url_or_path="$2"
  local dest_dir=""
  #
  # Test if couplet or thruple: If third arg. ends in /, indicates dest. dir;
  # otherwise (if set) is start of next remote name/url[/dest] pair/throuple
  # (which 'wireRemotes' uses, but not 'checkout').
  # - Use POSIX-compliant parameter expansion to test the third arg.
  #   - REFER: https://pubs.opengroup.org/onlinepubs/009695399/utilities/xcu_chap02.html#tag_02_06_02
  # - ALTLY: Use case test, e.g.,:
  #     case $3 in
  #       *"/") dest_dir="$3" ;;
  #     esac
  if [ "${3%/}" != "${3}" ]; then
    dest_dir="$3"
  fi
  #
  # Note this uses `_git_url_according_to_user` to make appropriate URL.
  git_clone_giturl -o "${remote_name}" "${remote_url_or_path}" "${dest_dir}"

